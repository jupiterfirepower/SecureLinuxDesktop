function f_preparefirewall {
	echo "[$i] iptables firewall rules"
	
#iptables controls five different tables: filter, nat, mangle, raw and security. 

#ICMP Type Numbers
#Code Fields
#Type 0 — Echo Reply
#Type 1 — Unassigned
#Type 2 — Unassigned
#Type 3 — Destination Unreachable
#Type 4 — Source Quench (Deprecated)
#Type 5 — Redirect
#Type 6 — Alternate Host Address (Deprecated)
#Type 7 — Unassigned
#Type 8 — Echo
#Type 9 — Router Advertisement
#Type 10 — Router Selection
#Type 11 — Time Exceeded
#Type 12 — Parameter Problem
#Type 13 — Timestamp
#Type 14 — Timestamp Reply
#Type 15 — Information Request (Deprecated)
#Type 16 — Information Reply (Deprecated)
#Type 17 — Address Mask Request (Deprecated)
#Type 18 — Address Mask Reply (Deprecated)
#Type 19 — Reserved (for Security)
#Types 20-29 — Reserved (for Robustness Experiment)
#Type 30 — Traceroute (Deprecated)
#Type 31 — Datagram Conversion Error (Deprecated)
#Type 32 — Mobile Host Redirect (Deprecated)
#Type 33 — IPv6 Where-Are-You (Deprecated)
#Type 34 — IPv6 I-Am-Here (Deprecated)
#Type 35 — Mobile Registration Request (Deprecated)
#Type 36 — Mobile Registration Reply (Deprecated)
#Types 37 — Domain Name Request (Deprecated)
#Types 38 — Domain Name Reply (Deprecated)
#Type 39 — SKIP (Deprecated)
#Type 40 — Photuris
#Type 41 — ICMP messages utilized by experimental mobility protocols such as Seamoby
#Types 42-252 — Unassigned
#Type 253 — RFC3692-style Experiment 1
#Type 254 — RFC3692-style Experiment 2

#0 — echo reply (echo-ответ, пинг)
#3 — destination unreachable (адресат недосягаем)
#4 — source quench (подавление источника, просьба посылать пакеты медленнее)
#5 — redirect (редирект)
#8 — echo request (echo-запрос, пинг)
#9 — router advertisement (объявление маршрутизатора)
#10 — router solicitation (ходатайство маршрутизатора)
#11 — time-to-live exceeded (истечение срока жизни пакета)
#12 — IP header bad (неправильный IPзаголовок пакета)
#13 — timestamp request (запрос значения счетчика времени)
#14 — timestamp reply (ответ на запрос значения счетчика времени)
#15 — information request (запрос информации)
#16 — information reply (ответ на запрос информации)
#17 — address mask request (запрос маски сети)
#18 — address mask reply (ответ на запрос маски сети)

# How do I disable outgoing ICMP request?
#Use the following rules:
#iptables -A OUTPUT -p icmp --icmp-type echo-request -j DROP
#OR
#iptables -A OUTPUT -p icmp --icmp-type 8 -j DROP


# KERNEL PARAMETER CONFIGURATION

# PREVENT YOU SYSTEM FROM ANSWERING ICMP ECHO REQUESTS
#echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all

# DROP ICMP ECHO-REQUEST MESSAGES SENT TO BROADCAST OR MULTICAST ADDRESSES
#echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

# DONT ACCEPT ICMP REDIRECT MESSAGES
#echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects

# DONT SEND ICMP REDIRECT MESSAGES
#echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects

# DROP SOURCE ROUTED PACKETS
#echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route

# ENABLE TCP SYN COOKIE PROTECTION FROM SYN FLOODS
#echo 1 > /proc/sys/net/ipv4/tcp_syncookies

# ENABLE SOURCE ADDRESS SPOOFING PROTECTION
#echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter

# LOG PACKETS WITH IMPOSSIBLE ADDRESSES (DUE TO WRONG ROUTES) ON YOUR NETWORK
#echo 1 > /proc/sys/net/ipv4/conf/all/log_martians

# DISABLE IPV4 FORWARDING
#echo 0 > /proc/sys/net/ipv4/ip_forward


#
#
# Script is for stoping Portscan and smurf attack

### first flush all the iptables Rules
iptables -F


# INPUT iptables Rules
# Accept loopback input
iptables -A INPUT -i lo -p all -j ACCEPT

# allow 3 way handshake
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

#Spoofed/Invalid packets
# Reject spoofed packets
# These adresses are mostly used for LAN's, so if these would come to a WAN-only server, drop them.
### DROPspoofing packets
iptables -A INPUT -s 10.0.0.0/8 -j DROP 
iptables -A INPUT -s 169.254.0.0/16 -j DROP
iptables -A INPUT -s 172.16.0.0/12 -j DROP
iptables -A INPUT -s 127.0.0.0/8 -j DROP
iptables -A INPUT -s 192.168.0.0/24 -j DROP

#Multicast-adresses. 
iptables -A INPUT -s 224.0.0.0/4 -j DROP
iptables -A INPUT -d 224.0.0.0/4 -j DROP
iptables -A INPUT -s 240.0.0.0/5 -j DROP
iptables -A INPUT -d 240.0.0.0/5 -j DROP
iptables -A INPUT -s 0.0.0.0/8 -j DROP
iptables -A INPUT -d 0.0.0.0/8 -j DROP
iptables -A INPUT -d 239.255.255.0/24 -j DROP
iptables -A INPUT -d 255.255.255.255 -j DROP

iptables -A INPUT -m geoip ! --src-cc RU,KZ,MN,BY -j DROP

#Block Smurf attacks
#for SMURF attack protection
iptables -A INPUT -p icmp -m icmp --icmp-type address-mask-request -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type timestamp-request -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type 3 -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type 4 -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type 5 -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type 9 -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type 10 -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type 12 -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type 13 -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type 15 -j DROP
iptables -A INPUT -p icmp -m icmp --icmp-type 8 -m limit --limit 2/second -j ACCEPT
iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j DROP

#SYN PACKETS
iptables -A INPUT -p tcp --syn -m limit --limit 1/s --limit-burst 3 -j RETURN

# DROP INVALID SYN PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

# MAKE SURE NEW INCOMING TCP CONNECTIONS ARE SYN PACKETS; OTHERWISE WE NEED TO DROP THEM 
iptables -A INPUT -p tcp ! --syn -m state --state NEW -j DROP

# DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK RESULT INTO LINUX SERVER PANIC SUCH DATA LOSS
iptables -A INPUT -f -j DROP

# DROP INCOMING MALFORMED XMAS PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP

# DROP INCOMING MALFORMED NULL PACKETS
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

# Droping all invalid packets
iptables -A INPUT -m state --state INVALID -j DROP
iptables -A FORWARD -m state --state INVALID -j DROP
iptables -A OUTPUT -m state --state INVALID -j DROP

# flooding of RST packets, smurf attack Rejection
iptables -A INPUT -p tcp -m tcp --tcp-flags RST RST -m limit --limit 2/second --limit-burst 2 -j ACCEPT

#Blocking portscan
# Attempt to block portscans
# Anyone who tried to portscan us is locked out for an entire day.
# Protecting portscans
# Attacking IP will be locked for 24 hours (3600 x 24 = 86400 Seconds)
iptables -A INPUT -m recent --name portscan --rcheck --seconds 86400 -j DROP
iptables -A FORWARD -m recent --name portscan --rcheck --seconds 86400 -j DROP

# Remove attacking IP after 24 hours
iptables -A INPUT -m recent --name portscan --remove
iptables -A FORWARD -m recent --name portscan --remove

# These rules add scanners to the portscan list, and log the attempt.
iptables -A INPUT -p tcp -m tcp --dport 139 -m recent --name portscan --set -j LOG --log-prefix "portscan:"
iptables -A INPUT -p tcp -m tcp --dport 139 -m recent --name portscan --set -j DROP

iptables -A FORWARD -p tcp -m tcp --dport 139 -m recent --name portscan --set -j LOG --log-prefix "portscan:"
iptables -A FORWARD -p tcp -m tcp --dport 139 -m recent --name portscan --set -j DROP

# Allow the following ports through from outside
#iptables -A INPUT -p tcp -m udp --dport 53 -j ACCEPT
#iptables -A INPUT -p tcp -m tcp --dport 993 -j ACCEPT
#iptables -A INPUT -p tcp -m tcp --dport 995 -j ACCEPT
 
# Allow ping means ICMP port is open (If you do not want ping replace ACCEPT with REJECT)
#iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT

#Block Well-Known TCP Attacks

#Add the following rules, preferably in -t raw -A PREROUTING
#iptables -t raw -A PREROUTING -A -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
iptables -t raw -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG FIN,PSH,URG -j DROP
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG FIN -j DROP
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG FIN,SYN,RST,PSH,ACK,URG -j DROP

#The attacks being blocked are, respectively:
#SYN-FIN attack
#SYN-RST attack
#X-Mas attack
#nmap FIN scan
#NULLflags attack
#ALLflags attack

#Block ICMP attacks
#Add the following rules, preferably in -t raw -A PREROUTING
iptables -t raw -A PREROUTING -p icmp -m u32 ! --u32 "4&0x3FFF=0"   -j DROP
iptables -t raw -A PREROUTING -p icmp -m length --length 1492:65535 -j DROP
#The first rule blocks all ICMP packets whose "fragmentation flag" is not 0. (ICMP should never be fragmented; they should be carrying small payloads)
#The second rule blocks oversized unfragmented ICMP packets.

netdev=$(ls /sys/class/net | sed -nr '1s/^([^ ]+).*/\1/p')

#Makes iptables wait 15 seconds between new connections from the same IP:
iptables -A INPUT -p tcp -i $netdev -m state --state NEW --dport 22 -m recent --update --seconds 15 -j DROP
iptables -A INPUT -p tcp -i $netdev -m state --state NEW --dport 22 -m recent --set -j ACCEPT

#Block ICMP (aka ping)
# Don't allow pings through
iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j DROP

# Lastly reject All INPUT traffic
iptables -A INPUT -j REJECT


################# Below are for OUTPUT iptables rules #############################################

## Allow loopback OUTPUT 
iptables -A OUTPUT -o lo -j ACCEPT
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Allow the following ports through from outside 
# SMTP = 25
# DNS =53
# HTTP = 80
# HTTPS = 443
# SSH = 22
### You can also add or remove port no. as per your requirement

# DROP INVALID SYN PACKETS
iptables -A OUTPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
iptables -A OUTPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
iptables -A OUTPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

# MAKE SURE NEW OUTGOING TCP CONNECTIONS ARE SYN PACKETS; OTHERWISE WE NEED TO DROP THEM 
iptables -A OUTPUT -p tcp ! --syn -m state --state NEW -j DROP

# DROP PACKETS WITH OUTGOING FRAGMENTS. THIS ATTACK RESULT INTO LINUX SERVER PANIC SUCH DATA LOSS
iptables -A OUTPUT -f -j DROP

# DROP OUTGOING MALFORMED XMAS PACKETS
iptables -A OUTPUT -p tcp --tcp-flags ALL ALL -j DROP

# DROP OUTGOING MALFORMED NULL PACKETS
iptables -A OUTPUT -p tcp --tcp-flags ALL NONE -j DROP

iptables -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
iptables -A OUTPUT -p tcp -m tcp --dport 25 -j ACCEPT
iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
iptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
iptables -A OUTPUT -p tcp -m tcp --dport 465 -j ACCEPT
iptables -A OUTPUT -p tcp -m tcp --dport 995 -j ACCEPT
iptables -A OUTPUT -p tcp -m tcp --dport 993 -j ACCEPT

# Allow pings
#iptables -A OUTPUT -p icmp --icmp-type 0 -j DROP # ping
#iptables -A OUTPUT -p icmp --icmp-type 3 -j ACCEPT #
#iptables -A OUTPUT -p icmp --icmp-type 4 -j ACCEPT #
#iptables -A OUTPUT -p icmp --icmp-type 11 -j ACCEPT #
#iptables -A OUTPUT -p icmp --icmp-type 12 -j ACCEPT #

# Lastly Reject all Output traffic
iptables -A OUTPUT -j REJECT

## Reject Forwarding  traffic
iptables -A FORWARD -j REJECT

iptables-save > /etc/iptables/rules.v4
ip6tables-save > /etc/iptables/rules.v6

#/sbin/ipset -N kiddies iphash
#iptables -t raw -N kiddies
#iptables -t raw -A kiddies -j MARK --set-mark 13
#iptables -t raw -A kiddies -j NOTRACK
#iptables -t raw -I PREROUTING -m set --match-set kiddies src -j kiddies
#iptables -N kiddies
#iptables -A kiddies -p tcp -j CHAOS --tarpit
#iptables -A kiddies -j DROP
#iptables -N blklst_n_lock
#iptables -A blklst_n_lock -j SET --add-set kiddies src
#iptables -A blklst_n_lock -j kiddies
#iptables -I INPUT -m psd -j blklst_n_lock
#iptables -I INPUT -m mark --mark 13 -j kiddies

  ((i++))
}
