# allow all on loopback
-A ufw-before-input -i lo -j ACCEPT
-A ufw-before-output -o lo -j ACCEPT

# quickly process packets for which we already have a connection
-A ufw-before-input -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A ufw-before-output -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A ufw-before-forward -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# drop INVALID packets (logs these in loglevel medium and higher)
-A ufw-before-input -m conntrack --ctstate INVALID -j ufw-logging-deny
-A ufw-before-input -m conntrack --ctstate INVALID -j DROP

# ok icmp codes for INPUT
-A ufw-before-input -p icmp --icmp-type destination-unreachable -j ACCEPT
-A ufw-before-input -p icmp --icmp-type source-quench -j ACCEPT
-A ufw-before-input -p icmp --icmp-type time-exceeded -j ACCEPT
-A ufw-before-input -p icmp --icmp-type parameter-problem -j ACCEPT
-A ufw-before-input -p icmp --icmp-type echo-request -j ACCEPT

# ok icmp code for FORWARD
-A ufw-before-forward -p icmp --icmp-type destination-unreachable -j ACCEPT
-A ufw-before-forward -p icmp --icmp-type source-quench -j ACCEPT
-A ufw-before-forward -p icmp --icmp-type time-exceeded -j ACCEPT
-A ufw-before-forward -p icmp --icmp-type parameter-problem -j ACCEPT
-A ufw-before-forward -p icmp --icmp-type echo-request -j ACCEPT

#Spoofed/Invalid packets
# Reject spoofed packets
# These adresses are mostly used for LAN's, so if these would come to a WAN-only server, drop them.
### DROPspoofing packets
# Reject packets from RFC1918 class networks (i.e., spoofed)
-A ufw-before-input -s 10.0.0.0/8 -j DROP 
-A ufw-before-input -s 169.254.0.0/16 -j DROP
-A ufw-before-input -s 172.16.0.0/12 -j DROP
-A ufw-before-input -s 127.0.0.0/8 -j DROP
-A ufw-before-input -s 192.168.0.0/24 -j DROP

#Multicast-adresses. 
-A ufw-before-input -s 224.0.0.0/4 -j DROP
-A ufw-before-input -d 224.0.0.0/4 -j DROP
-A ufw-before-input -s 240.0.0.0/5 -j DROP
-A ufw-before-input -d 240.0.0.0/5 -j DROP
-A ufw-before-input -s 0.0.0.0/8 -j DROP
-A ufw-before-input -d 0.0.0.0/8 -j DROP
-A ufw-before-input -d 239.255.255.0/24 -j DROP
-A ufw-before-input -d 255.255.255.255 -j DROP

### 8: Limit connections per source IP ###
-A ufw-before-input -p tcp -m connlimit --connlimit-above 111 -j REJECT --reject-with tcp-reset

### 9: Limit RST packets ###
-A ufw-before-input -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
-A ufw-before-input -p tcp --tcp-flags RST RST -j DROP

### 10: Limit new TCP connections per second per source IP ###
-A ufw-before-input -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT
-A ufw-before-input -p tcp -m conntrack --ctstate NEW -j DROP

### SSH brute-force protection ###
-A ufw-before-input -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --set
-A ufw-before-input -p tcp --dport ssh -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP

### Protection against port scanning ###
#-N port-scanning
#-A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN
#-A port-scanning -j DROP

#Block Smurf attacks
#for SMURF attack protection
-A ufw-before-input -p icmp -m icmp --icmp-type 17 -j DROP
-A ufw-before-input -p icmp -m icmp --icmp-type 13 -j DROP
#-A ufw-before-input -p icmp -m icmp -m limit --limit 1/second -j ACCEPT
-A ufw-before-input -p icmp -m limit --limit 2/second --limit-burst 2 -j ACCEPT
# To block all the ICMP packets
#-A ufw-before-input -p icmp -m icmp -j DROP

# flooding of RST packets, smurf attack Rejection
-A ufw-before-input -p tcp -m tcp --tcp-flags RST RST -m limit --limit 2/second --limit-burst 2 -j ACCEPT

#SYN PACKETS
-A ufw-before-input -p tcp --syn -m limit --limit 1/s --limit-burst 3 -j RETURN

# DROP INVALID SYN PACKETS
-A ufw-before-input -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
-A ufw-before-input -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
-A ufw-before-input -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

# MAKE SURE NEW INCOMING TCP CONNECTIONS ARE SYN PACKETS; OTHERWISE WE NEED TO DROP THEM
-A ufw-before-input -p tcp ! --syn -m state --state NEW -j DROP

# DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK RESULT INTO LINUX SERVER PANIC SUCH DATA LOSS
-A ufw-before-input -f -j DROP

# DROP INCOMING MALFORMED XMAS PACKETS
-A ufw-before-input -p tcp --tcp-flags ALL ALL -j DROP

# DROP INCOMING MALFORMED NULL PACKETS
-A ufw-before-input -p tcp --tcp-flags ALL NONE -j DROP

# Droping all invalid packets
-A ufw-before-input -m state --state INVALID -j DROP
-A ufw-before-forward -m state --state INVALID -j DROP
-A ufw-before-output -m state --state INVALID -j DROP

# Drop bogus TCP packets
-A ufw-before-input -p tcp -m tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
-A ufw-before-input -p tcp -m tcp --tcp-flags SYN,RST SYN,RST -j DROP

#Blocking portscan
# Attempt to block portscans
# Anyone who tried to portscan us is locked out for an entire day.
# Protecting portscans
# Attacking IP will be locked for 24 hours (3600 x 24 = 86400 Seconds)
-A ufw-before-input -m recent --name portscan --rcheck --seconds 86400 -j DROP
-A ufw-before-forward -m recent --name portscan --rcheck --seconds 86400 -j DROP

# Remove attacking IP after 24 hours
-A ufw-before-input -m recent --name portscan --remove
-A ufw-before-forward -m recent --name portscan --remove

# These rules add scanners to the portscan list, and log the attempt.
-A ufw-before-input -p tcp -m tcp --dport 139 -m recent --name portscan --set -j LOG --log-prefix "portscan:"
-A ufw-before-input -p tcp -m tcp --dport 139 -m recent --name portscan --set -j DROP
-A ufw-before-forward -p tcp -m tcp --dport 139 -m recent --name portscan --set -j LOG --log-prefix "portscan:"
-A ufw-before-forward -p tcp -m tcp --dport 139 -m recent --name portscan --set -j DROP

#Makes iptables wait 15 seconds between new connections from the same IP:
-A ufw-before-input -p tcp -i eth0 -m state --state NEW --dport 22 -m recent --update --seconds 15 -j DROP
-A ufw-before-input -p tcp -i eth0 -m state --state NEW --dport 22 -m recent --set -j ACCEPT

#Block ICMP (aka ping)
# Don't allow pings through
-A ufw-before-input -p icmp -m icmp --icmp-type 8 -j DROP

#FINGERPRINTING
-A ufw-before-input -p tcp --dport 0 -j DROP
-A ufw-before-input -p udp --dport 0 -j DROP
-A ufw-before-input -p tcp --sport 0 -j DROP
-A ufw-before-input -p udp --sport 0 -j DROP

################# Below are for OUTPUT iptables rules #############################################

## Allow loopback OUTPUT
-A ufw-before-output -o lo -j ACCEPT

# DROP INVALID SYN PACKETS
-A ufw-before-output -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
-A ufw-before-output -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
-A ufw-before-output -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

# MAKE SURE NEW OUTGOING TCP CONNECTIONS ARE SYN PACKETS; OTHERWISE WE NEED TO DROP THEM
-A ufw-before-output -p tcp ! --syn -m state --state NEW -j DROP

# DROP PACKETS WITH OUTGOING FRAGMENTS. THIS ATTACK RESULT INTO LINUX SERVER PANIC SUCH DATA LOSS
-A ufw-before-output -f -j DROP

# DROP OUTGOING MALFORMED XMAS PACKETS
-A ufw-before-output -p tcp --tcp-flags ALL ALL -j DROP

# DROP OUTGOING MALFORMED NULL PACKETS
-A ufw-before-output -p tcp --tcp-flags ALL NONE -j DROP

#################################################################################################

